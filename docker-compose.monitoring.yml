version: "3.3"

services:
  viz:
    # A swarm visualizer, enables us to view what the cluster
    # looks like, which services are running on which nodes etc.
    image: dockersamples/visualizer:stable
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints: [node.role == manager]

  cadvisor:
    image: google/cadvisor:v0.31.0
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /dev/disk/:/dev/disk:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global

  node-exporter:
    image: basi/node-exporter:v1.15.0
    volumes:
      - /proc:/host/proc
      - /sys:/host/sys
      - /:/rootfs
      - /etc/hostname:/etc/host_hostname
    environment:
      HOST_HOSTNAME: /etc/host_hostname
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    deploy:
      mode: global

  docker-exporter:
    image: alpine/socat:1.0.3
    command: -d TCP-L:4999,fork TCP:172.18.0.1:4999
    deploy:
      mode: global

  prometheus:
    image: prom/prometheus:v1.8.2
    configs:
      - source: prometheus
        target: /etc/prometheus/prometheus.yml
      - source: prometheus_alerts
        target: /etc/prometheus/alert.rules
    command:
      - '-storage.local.target-heap-size=715827882'
      - '-storage.local.retention=720h'
      - '-config.file=/etc/prometheus/prometheus.yml'
      - '-alertmanager.url=http://alertmanager:9093'
    deploy:
      placement:
        constraints: [node.role == manager]

  alertmanager:
    image: prom/alertmanager:v0.15.3
    entrypoint: /init_alertmanager
    secrets:
      - slack_webhook
    configs:
      - source: alertmanager
        target: /tmp/config.yml
      - source: init_alertmanager
        mode: 100
    command: --config.file=/etc/alertmanager/config.yml
    deploy:
      placement:
        constraints: [node.role == manager]
      replicas: 1

  grafana:
    image: grafana/grafana:4.6.4
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: 'true'
      GF_SERVER_ROOT_URL: /grafana
      PROMETHEUS_ENDPOINT: http://prometheus:9090
      #dashboards can be added on the form "id:revision,id:revision" and so on
      DASHBOARDS_IMPORT: "179:5"
    entrypoint: /init_grafana
    configs:
      - source: init_grafana
        mode: 100
      - source: datasource_prometheus
        mode: 100
      - source: import_dashboards
        mode: 100
      - source: engine_dashboard
        target: /dashboard/engine_dashboard.json
        mode: 0444
      - source: performance_engine_dashboard
        target: /dashboard/performance_engine_dashboard.json
        mode: 0444
    deploy:
      placement:
        constraints: [node.role == manager]

  openresty:
    environment:
      GRAFANA_HOST: grafana
      VISUALIZER_HOST: viz

configs:
  init_grafana:
    file: ./configs/grafana/init.sh
  datasource_prometheus:
    file: ./configs/grafana/datasource-prometheus.sh
  import_dashboards:
    file: ./configs/grafana/import-dashboards.sh
  engine_dashboard:
    file: ./configs/grafana/qix-engine-dashboard.json
  performance_engine_dashboard:
    file: ./configs/grafana/qix-and-performance-dashboard.json
  prometheus:
    file: ./configs/prometheus/prometheus.yml
  prometheus_alerts:
    file: ./configs/prometheus/alert.rules
  alertmanager:
    file: ./configs/alertmanager/config.yml
  init_alertmanager:
    file: ./configs/alertmanager/init.sh

secrets:
  slack_webhook:
    file: ./secrets/SLACK_WEBHOOK
