input {
  beats {
    port => 5044
    host => "0.0.0.0"
    client_inactivity_timeout => 0
  }
}

filter {
  if [docker][container][image] =~ /^qlikea\/mira.*|qliktive-qix-session-service.*|engine.*|qliktive-authentication-service.*/
  or [docker][container][image] =~ /.*logstash-oss.*/ 
  or [docker][container][image] =~ /.*kibana-oss.*/ {
    json {
      source => "log"
    }
  }

  if [docker][container][image] =~ /.*prometheus|node-exporter.*/ {
    grok {
        match => {
        "log" => [
          "time=\"%{TIMESTAMP_ISO8601}\" level=%{LOGLEVEL:severity} msg=%{QS:msg} source=%{QS:source}" # Using severity to cast string to UPPER later
        ]
      }
      tag_on_failure => [ ]
    }
    mutate { remove_field => [ "QUOTEDSTRING" ] }
  }
  
  if [docker][container][image] =~ /.*elasticsearch.*/ {
    grok {
        match => {
        "log" => [
          "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{DATA:severity} \]\[%{DATA:source}\] (?<message>(.|\r|\n)*)" # Using severity to cast string to UPPER later
        ]
      }
      tag_on_failure => [ ]
    }
  }

  if [docker][container][image] =~ /.*alertmanager.*/ {
    grok {
        match => {
        "log" => [
          "level=%{LOGLEVEL:severity} ts=%{TIMESTAMP_ISO8601} caller=%{GREEDYDATA:src} component=%{WORD:component} msg=%{QS:msg}" # Using severity to cast string to UPPER later
        ]
      }
      tag_on_failure => [ ]
    }
    mutate { remove_field => [ "QUOTEDSTRING" ] }
  }

  if [docker][container][image] =~ /.*redis.*/ {
    grok {
        match => {
        "log" => [
          "%{POSINT:pid}:(C|M) %{REDISTIMESTAMP:timestamp} \* %{GREEDYDATA:msg}"
        ]
      }
      tag_on_failure => [ ]
    }
  }

  if [docker][container][image] =~ /.*beats\/filebeat.*/ {
    grok {
        match => {
        "log" => [
          ": %{GREEDYDATA:JSON}"
        ]
      }
      tag_on_failure => [ ]
    }

    json {
      source => "JSON"
    }

    if [level] == "ERR" {
      mutate {
        replace => [ "level", "ERROR" ]
      }
    }
  }

  if [docker][container][image] =~ /^qlikea\/qliktive-custom-analytics-openresty.*/ {
    # Check if log is JSON (=http_access) or "text" (=http_error)
    if [log] =~ /^{.*}$/ {
      # Nginx access logs
      json {
        source => "log"
        add_field => {"log_type" => "http_access"}
        tag_on_failure => [ ]
      }
    } else {
      # Nginx error logs
      grok {
          match => {
          "log" => [
            "(?<timestamp>%{YEAR}[./]%{MONTHNUM}[./]%{MONTHDAY} %{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER}: %{GREEDYDATA:errormessage}"
          ]
        }
        add_field => {"log_type" => "http_error"}
        tag_on_failure => [ ]
      }
    }

    # Map http status code to logseverity 
    if [status] =~ /[1-3]\d\d/ {
      mutate { add_field => { "logseverity" => "INFO" } }
    } 
    if [status] =~ /[4]\d\d/ {
      mutate { add_field => { "logseverity" => "WARN" } }
    }
    if [status] =~ /[5]\d\d/ {
      mutate { add_field => { "logseverity" => "ERROR" } }
    }
  }

  # Replace timestamp with logstash @timestamp if it contains a forward slash
  if [timestamp] =~ /\// {
    mutate {
      replace => [ "timestamp", "%{@timestamp}" ]
    }
  }

  # If level is not numeric, mutate to logseverity to avoid conflict in elasticsearch
  if [level] =~ /[^0-9]+/ {
    mutate {
      convert => { "level" => "string" }
      rename => { "level" => "logseverity" }
      uppercase => [ "logseverity" ]
    }
  }

  # Change severity to log_severity
  if [severity] {
    mutate {
      convert => { "severity" => "string" }
      rename => { "severity" => "logseverity" }
      uppercase => [ "logseverity" ]
    }
  }
}

output {
  elasticsearch {
    hosts => "elasticsearch:9200"
  }
}
