input {
	gelf {
		port => 12201
	}
}

filter {
	if [image_name] =~ /^qlikea\/mira.*/ {
		json {
			source => "message"
			remove_field => ["level"]
		}
	}

	if [image_name] =~ /^qlikea\/qliktive-qix-session-service.*/ {
		json {
			source => "message"
			remove_field => ["level"]
		}
	}

	if [image_name] =~ /^qlikea\/engine.*/ {
		json {
			source => "message"
		}
	}

	if [image_name] =~ /^qlikea\/qliktive-custom-analytics-openresty.*/ {
		# nginx http_error log
		grok {
			match => {
				"message" => [
						"(?<timestamp>%{YEAR}[./-]%{MONTHNUM}[./-]%{MONTHDAY}[- ]%{TIME}) \[%{LOGLEVEL:severity}\] %{POSINT:pid}#%{NUMBER:threadid}: \*%{NUMBER:connectionid} %{GREEDYDATA:errormessage}(?:, client: (?<client>%{IPORHOST}))(?:, server: (?<server>%{IPORHOST}|_))(?:, request: %{QS:request})?(?:, upstream: \"%{URI:upstream}\")?(?:, host: %{QS:host})?(?:, referrer: \"%{URI:referrer}\")?"
				]
			}
			add_field => {"log_type" => "http_error"}
			tag_on_failure => [ ]
		}

		# nginx http_access log
		grok {
			match => [ "message" , "%{COMBINEDAPACHELOG}+%{GREEDYDATA:extra_fields}"]
			add_field => {"log_type" => "http_access"}
			tag_on_failure => [ ]
		}

		date {
			match => [ "timestamp" , "YYYY/MM/dd HH:mm:ss", "dd/MMM/YYYY:HH:mm:ss Z" ]
			remove_field => [ "timestamp" ]
		}

		if [log_type] == "http_access" {
			mutate {
				convert => ["response", "integer"]
				convert => ["bytes", "integer"]
				convert => ["responsetime", "float"]
			}

			geoip {
				source => "clientip"
				target => "geoip"
			}

			useragent {
				source => "agent"
			}
		}

		if [log_type] == "http_error" {
			geoip {
				source => "client"
				target => "geoip"
			}
		}
	}
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
	}
}
